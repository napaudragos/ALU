//generated by Digital

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule

module d_latch (
  input d,
  input e,
  output q
);
  wire nq_temp;
  wire q_temp;
  assign q_temp = ~ ((~ d & e) | nq_temp);
  assign nq_temp = ~ (q_temp | (e & d));
  assign q = q_temp;
endmodule


module d_ff (
  input d,
  input clk,
  output q
);
  wire s0;
  wire s1;
  wire s2;
  assign s0 = ~ clk;
  // master
  d_latch d_latch_i0 (
    .d( d ),
    .e( s0 ),
    .q( s1 )
  );
  assign s2 = ~ s0;
  // slave
  d_latch d_latch_i1 (
    .d( s1 ),
    .e( s2 ),
    .q( q )
  );
endmodule


module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module shift_reg_8 (
  input clk,
  input rst,
  input [7:0] in,
  input load,
  input [1:0] sel,
  input bit_in,
  output [7:0] out,
  output bit_out
);
  wire s0;
  wire s1;
  wire [7:0] s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire [7:0] out_temp;
  wire [7:0] s18;
  wire [7:0] s19;
  wire [7:0] s20;
  wire s21;
  assign s0 = ~ rst;
  assign s21 = sel[0];
  assign s1 = (s2[0] & s0);
  assign s16 = (s2[1] & s0);
  assign s11 = (s2[2] & s0);
  assign s13 = (s2[3] & s0);
  assign s7 = (s2[4] & s0);
  assign s9 = (s2[5] & s0);
  assign s3 = (s2[6] & s0);
  assign s5 = (s2[7] & s0);
  assign s18[0] = s17;
  assign s18[1] = s12;
  assign s18[2] = s14;
  assign s18[3] = s8;
  assign s18[4] = s10;
  assign s18[5] = s4;
  assign s18[6] = s6;
  assign s18[7] = bit_in;
  assign s19[0] = bit_in;
  assign s19[1] = s15;
  assign s19[2] = s17;
  assign s19[3] = s12;
  assign s19[4] = s14;
  assign s19[5] = s8;
  assign s19[6] = s10;
  assign s19[7] = s4;
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i0 (
    .sel( load ),
    .in_0( s20 ),
    .in_1( in ),
    .out( s2 )
  );
  Mux_4x1_NBits #(
    .Bits(8)
  )
  Mux_4x1_NBits_i1 (
    .sel( sel ),
    .in_0( out_temp ),
    .in_1( out_temp ),
    .in_2( s19 ),
    .in_3( s18 ),
    .out( s20 )
  );
  Mux_2x1 Mux_2x1_i2 (
    .sel( s21 ),
    .in_0( s6 ),
    .in_1( s15 ),
    .out( bit_out )
  );
  d_ff d_ff_i3 (
    .d( s3 ),
    .clk( clk ),
    .q( s4 )
  );
  d_ff d_ff_i4 (
    .d( s5 ),
    .clk( clk ),
    .q( s6 )
  );
  d_ff d_ff_i5 (
    .d( s7 ),
    .clk( clk ),
    .q( s8 )
  );
  d_ff d_ff_i6 (
    .d( s9 ),
    .clk( clk ),
    .q( s10 )
  );
  d_ff d_ff_i7 (
    .d( s11 ),
    .clk( clk ),
    .q( s12 )
  );
  d_ff d_ff_i8 (
    .d( s13 ),
    .clk( clk ),
    .q( s14 )
  );
  d_ff d_ff_i9 (
    .d( s1 ),
    .clk( clk ),
    .q( s15 )
  );
  d_ff d_ff_i10 (
    .d( s16 ),
    .clk( clk ),
    .q( s17 )
  );
  assign out_temp[0] = s15;
  assign out_temp[1] = s17;
  assign out_temp[2] = s12;
  assign out_temp[3] = s14;
  assign out_temp[4] = s8;
  assign out_temp[5] = s10;
  assign out_temp[6] = s4;
  assign out_temp[7] = s6;
  assign out = out_temp;
endmodule


module shift_reg_16 (
  input clk,
  input rst,
  input [7:0] in,
  input [1:0] load,
  input bit_in,
  input [1:0] sel,
  input force_q0,
  output [15:0] out,
  output bit_out
);
  wire [7:0] s0;
  wire [7:0] s1;

  wire [7:0] q_forced_in, q_in;
  assign q_forced_in = {s0[7:1], bit_in};
  assign q_in = ({8{force_q0}} & q_forced_in) | ({8{~force_q0}} & in);

  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  assign s2 = ~ sel[0];
  assign s8 = load[0];
  assign s7 = load[1];

  Mux_2x1 Mux_2x1_i0 (
    .sel( s2 ),
    .in_0( bit_in ),
    .in_1( s3 ),
    .out( s4 )
  );
  Mux_2x1 Mux_2x1_i1 (
    .sel( s2 ),
    .in_0( s5 ),
    .in_1( bit_in ),
    .out( s6 )
  );
  Mux_2x1 Mux_2x1_i2 (
    .sel( s2 ),
    .in_0( s3 ),
    .in_1( s5 ),
    .out( bit_out )
  );
  // A
  shift_reg_8 shift_reg_8_i3 (
    .clk( clk ),
    .rst( rst ),
    .in( in ),
    .load( s7 ),
    .sel( sel ),
    .bit_in( s4 ),
    .out( s1 ),
    .bit_out( s5 )
  );
  // Q
  shift_reg_8 shift_reg_8_i4 (
    .clk( clk ),
    .rst( rst ),
    .in( q_in ),
    .load( s8 | force_q0),
    .sel( sel ),
    .bit_in( s6 ),
    .out( s0 ),
    .bit_out( s3 )
  );
  assign out[7:0] = s0;
  assign out[15:8] = s1;
endmodule


